package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

  private static final long serialVersionUID = 1L;

  private DbIterator child1;
  private DbIterator child2;

  private final TupleDesc td1;
  private final TupleDesc td2;
  private final TupleDesc td;

  private final JoinPredicate p;

  private Tuple lastTuple = null;

  /**
   * Constructor. Accepts to children to join and the predicate to join them
   * on.
   * 
   * @param p The predicate to use to join the children.
   *
   * @param child1 Iterator for the left(outer) relation to join.
   *
   * @param child2 Iterator for the right(inner) relation to join.
   */
  public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
    this.child1 = child1;
    this.child2 = child2;
    this.p = p;
    this.td1 = child1.getTupleDesc();
    this.td2 = child2.getTupleDesc();

    this.td = TupleDesc.merge(this.td1, this.td2);
  }

  public JoinPredicate getJoinPredicate() {
    return p;
  }

  /**
   * Returns the field name of join field1. Should be quantified by alias or
   * table name.
   * */
  public String getJoinField1Name() {
    // TODO(foreverbell): Quantified by table name or alias?
    return td1.getFieldName(p.getField1());
  }

  /**
   * Returns the field name of join field2. Should be quantified by alias or
   * table name.
   * */
  public String getJoinField2Name() {
    // TODO(foreverbell): Quantified by table name or alias?
    return td2.getFieldName(p.getField2());
  }

  /**
   * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
   * implementation logic.
   */
  public TupleDesc getTupleDesc() {
    return td;
  }

  public void open() throws DbException, NoSuchElementException,
      TransactionAbortedException {
    child1.open();
    child2.open();
    super.open();

    if (child1.hasNext()) {
      lastTuple = child1.next();
    }
  }

  public void close() {
    super.close();
    child2.close();
    child1.close();

    lastTuple = null;
  }

  public void rewind() throws DbException, TransactionAbortedException {
    child1.rewind();
    child2.rewind();

    if (child1.hasNext()) {
      lastTuple = child1.next();
    }
  }

  /**
   * Returns the next tuple generated by the join, or null if there are no
   * more tuples. Logically, this is the next tuple in r1 cross r2 that
   * satisfies the join predicate. There are many possible implementations;
   * the simplest is a nested loops join.
   *
   * Note that the tuples returned from this particular implementation of Join
   * are simply the concatenation of joining tuples from the left and right
   * relation. Therefore, if an equality predicate is used there will be two
   * copies of the join attribute in the results. (Removing such duplicate
   * columns can be done with an additional projection operator if needed.)
   *
   * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
   * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
   * 
   * @return The next matching tuple.
   *
   * @see JoinPredicate#filter.
   */
  protected Tuple fetchNext() throws TransactionAbortedException, DbException {
    while (lastTuple != null) {
      while (child2.hasNext()) {
        Tuple tuple2 = child2.next();

        if (p.filter(lastTuple, tuple2)) {
          Tuple newTuple = new Tuple(td);

          // TODO(foreverbell): Determine RecordId.
          newTuple.setRecordId(lastTuple.getRecordId());
          for (int i = 0; i < td1.numFields(); ++i) {
            newTuple.setField(i, lastTuple.getField(i));
          }
          for (int i = 0; i < td2.numFields(); ++i) {
            newTuple.setField(i + td1.numFields(), tuple2.getField(i));
          }
          return newTuple;
        }
      }
      if (child1.hasNext()) {
        lastTuple = child1.next();
        child2.rewind();
      } else {
        return null;
      }
    }
    return null;
  }

  @Override
  public DbIterator[] getChildren() {
    return new DbIterator[] { this.child1, this.child2 };
  }

  @Override
  public void setChildren(DbIterator[] children) {
    if (this.child1 != children[0]) {
      this.child1 = children[0];
    }
    if (this.child2 != children[1]) {
      this.child2 = children[1];
    }
  }

}
